const Emitter = require('events')

const debug = require('debug')('cella-client')
const RStream = require('rstream')

const pkgInfo = require('../package.json')
const NotImplementedError = require('./errors')

const MESSAGE_TYPE = {
	NEWS: 'news',
	VOICE: 'voice',
	IMAGE: 'image',
	TEXT: 'text',
	LOCATION: 'LOCATION',
	EVENT: 'event',
}

/**
 * Expose `CellaClient` class.
 * Inherits from `Emitter.prototype`
 */

module.exports = class CellaClient extends Emitter {

	/**
	 * Initialize a new `CellaClient`.
	 *
	 * @param {Object} option
	 * @api public
	 */

	constructor(option) {
		super()

		if ('object' == typeof option) {
			this.token = option.token
			this.rstreamAddr = option.server
		} else {
			this.token = option
			this.rstreamAddr = 'ws://stream.cella.xyz'
		}

		if (!this.token) {
			throw new Error('Token can not be null')
		}

		this.version = pkgInfo.version

		this.rstream = this.createRStream()

		process.nextTick(_ => {
			this.rstream.open()
			debug(`Start listening by token: ${this.token}`)
		})
	}

	/**
	 * Initialize a new RStream
	 *
	 * @api private
	 */

	createRStream() {
		const rstream = new RStream({
			server: this.rstreamAddr,
			token: this.token,
		})

		rstream.on('connect_error', err => {
			debug('RStream connect_error', err)
			this.emit('connect_error', err)
		})

		rstream.on('error', err => {
			debug('rstrea.onError', err)
			this.emit('error', err)
		})

		rstream.on('message', this.handleRawMsg.bind(this))

		rstream.on('connect', _ => {
			debug('RStream connected')
			this.emit('connect')
		})

		return rstream
	}

	/**
	 * Close stream
	 *
	 * @api public
	 */

	close() {
		this.rstream.close()
	}

	/**
	 * Process raw message
	 *
	 * @param {Object} message
	 * @api private
	 */

	handleRawMsg(rawMsg) {
		// debug('handleRawMsg', rawMsg)
		const msg = {
			platform: 'wechat',
			id: rawMsg.id,
			type: rawMsg.body.MsgType,
			userId: rawMsg.body.FromUserName,
			userProfile: rawMsg.body.UserProfile || {},
			to: rawMsg.to,
			createTime: rawMsg.body.CreateTime,
			body: rawMsg.body,
		}

		delete msg.body.UserProfile

		if ('event' === msg.type && 'LOCATION' === msg.body.Event) {
			msg.type = 'location_report'
		}

		if ('text' === msg.type && msg.body.Content == '【收到不支持的消息类型，暂无法显示】') {
			msg.type = 'wechat_not_support'
		}

		this.emit('rawMessage', rawMsg)
		this.emit('message', msg)
	}

	/**
	 * sendMessage
	 *
	 * @param {Object} respond
	 * @api private
	 */

	sendMessage(respond) {
		debug('sendMessage', respond)
		this.rstream.sendMessage(respond)
	}

	/**
	 * composeMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {String} msgType - message type
	 * @param {Object} msgBody - message body
	 * @api public
	 */

	composeMessage(toUser, msgType, msgBody) {
		const respond_body = {
			touser: toUser,
			msgtype: msgType,
		}

		respond_body[msgType] = msgBody

		const respond = {
			to: 'cella-wx-touch-svc-token',
			body: respond_body,
		}

		return respond
	}

	/**
	 * sendTextMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {String} text
	 * @api public
	 */

	sendTextMessage(toUser, text) {
		const msg = this.composeTextMessage(toUser, text)

		this.sendMessage(msg)
	}

	composeTextMessage(toUser, text) {
		const respond = {
			content: text,
		}

		return this.composeMessage(toUser, MESSAGE_TYPE.TEXT, respond)
	}

	/**
	 * sendImageMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {String} mediaId
	 * @api public
	 */

	sendImageMessage(toUser, mediaId) {
		const respond = this.composeImageMessage(toUser, mediaId)
		this.sendMessage(respond)
	}

	composeImageMessage(toUser, mediaId) {
		const respond = {
			media_id: mediaId,
		}

		return this.composeMessage(toUser, MESSAGE_TYPE.IMAGE, respond)
	}

	/**
	 * sendVoiceMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {String} mediaId
	 * @api public
	 */

	sendVoiceMessage(toUser, mediaId) {
		const respond = this.composeVoiceMessage(toUser, mediaId)
		this.sendMessage(respond)
	}

	composeVoiceMessage(toUser, mediaId) {
		const respond = {
			media_id: mediaId,
		}

		return this.composeMessage(toUser, MESSAGE_TYPE.VOICE, respond)
	}

	/**
	 * sendVideoMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {String} mediaId
	 * @api public
	 */

	sendVideoMessage(toUser, mediaId) {
		const respond = this.composeVideoMessage(toUser, mediaId)
		this.sendMessage(respond)
	}

	composeVideoMessage(toUser, mediaId) {
		// WeChat not support this kind of request good, we'll implement this later.
		// ```
		// { errcode: 45161
		// , errmsg: this video id must be generated by calling upload api
		//
		throw new NotImplementedError('sendVideoMessage')
	}

	/**
	 * sendRichMessage
	 *
	 * @param {String} toUser - user's Wechat OpenID
	 * @param {Object} articles - an article array of article object
	 * @api public
	 */

	sendRichMessage(toUser, articles) {
		const respond = this.composeRichMessage(toUser, articles)
		this.sendMessage(respond)
	}

	composeRichMessage(toUser, articles) {
		let respond = {
			articles,
		}

		if (!isArray(articles)) {
			respond = {
				articles: [
					articles,
				],
			}
		}

		return this.composeMessage(toUser, MESSAGE_TYPE.NEWS, respond)
	}
}

/**
 * Determine if an object is Array
 *
 * @param {Object} obj
 * @api private
 */
function isArray(obj) {
	return (!!obj) && (obj.constructor === Array)
}
